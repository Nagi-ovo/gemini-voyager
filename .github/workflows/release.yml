name: Release
run-name: >
  ${{
    (github.event_name == 'workflow_dispatch' && inputs.version && format('chore(release): v{0}', inputs.version)) ||
    (startsWith(github.ref, 'refs/tags/') && format('chore(release): {0}', github.ref_name)) ||
    format('Release #{0}', github.run_number)
  }}

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g. 0.2.0)'
        required: false
        type: string
      notes:
        description: 'Release notes (optional)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 'latest'

      # If a version is provided via manual dispatch, bump files, commit and create tag
      - name: Bump version, commit and tag (manual)
        if: ${{ inputs.version != '' }}
        env:
          VERSION: ${{ inputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Bumping to version ${VERSION}"
          node -e "const fs=require('fs');const v=process.env.VERSION;const p=JSON.parse(fs.readFileSync('package.json','utf8'));p.version=v;fs.writeFileSync('package.json',JSON.stringify(p,null,2)+'\n');const m=JSON.parse(fs.readFileSync('manifest.json','utf8'));m.version=v;fs.writeFileSync('manifest.json',JSON.stringify(m,null,2)+'\n');"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add package.json manifest.json
          git commit -m "chore(release): v${VERSION}" || echo "No changes to commit"
          git tag v${VERSION} || echo "Tag exists"
          git push origin HEAD:main --tags

      - name: Compute tag name
        id: tag
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            echo "name=v${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "name=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          fi

      - name: Install deps
        run: bun i

      - name: Build (Chrome)
        run: bun run build:chrome

      - name: Build (Firefox)
        run: bun run build:firefox

      - name: Archive dist_chrome
        run: |
          cd dist_chrome
          zip -r ../gemini-voyager-chrome-${{ steps.tag.outputs.name }}.zip .

      - name: Archive dist_firefox
        run: |
          cd dist_firefox
          zip -r ../gemini-voyager-firefox-${{ steps.tag.outputs.name }}.zip .

      # Optional: upload to Actions artifacts (can be removed if not needed)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: gemini-voyager-artifacts-${{ steps.tag.outputs.name }}
          path: |
            gemini-voyager-chrome-${{ steps.tag.outputs.name }}.zip
            gemini-voyager-firefox-${{ steps.tag.outputs.name }}.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            gemini-voyager-chrome-${{ steps.tag.outputs.name }}.zip
            gemini-voyager-firefox-${{ steps.tag.outputs.name }}.zip
          name: Gemini Voyager ${{ steps.tag.outputs.name }}
          tag_name: ${{ steps.tag.outputs.name }}
          body: ${{ inputs.notes }}
          generate_release_notes: ${{ inputs.notes == '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
